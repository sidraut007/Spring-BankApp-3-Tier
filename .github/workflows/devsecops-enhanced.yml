name: DevSecOps Enhanced Bank-app Pipeline

on:
  workflow_dispatch:
    inputs:
      DOCKER_TAG:
        description: 'Choose the Docker image tag for the deployment'
        required: true
        default: 'blue'
        type: choice
        options:
          - blue
          - green
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: sidraut007/spring-bankapp
  REGISTRY: docker.io

jobs:
  # Security: Input validation and sanitization
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      safe-tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Validate Docker tag input
        id: validate
        run: |
          TAG="${{ github.event.inputs.DOCKER_TAG || 'blue' }}"
          # Validate tag contains only allowed characters
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9._-]+$ ]]; then
            echo "Invalid tag format: $TAG"
            exit 1
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # Security: Secret scanning
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Security: SAST - Static Application Security Testing
  sast-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'bankapp'
          path: '.'
          format: 'ALL'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/

  # Enhanced build with security
  build-test-package:
    needs: [validate-inputs, secret-scan]
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.validate-inputs.outputs.safe-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Maven compile
        run: mvn compile

      - name: Run unit tests with coverage
        run: mvn test jacoco:report

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/

      - name: Package application
        run: mvn clean install -DskipTests=false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifact
          path: target/*.jar

  # Security: Container scanning
  docker-security-scan:
    needs: [build-test-package, sast-scan]
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.validate-inputs.outputs.safe-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: target/

      - name: Build Docker image for scanning
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.TAG }}-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ env.TAG }}-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  # Secure Docker build and push
  docker-build-push:
    needs: [docker-security-scan]
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.validate-inputs.outputs.safe-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: jar-artifact
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.TAG }}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Sign container image
        uses: sigstore/cosign-installer@v3

      - name: Sign the published Docker image
        run: |
          cosign sign --yes ${{ env.IMAGE_NAME }}:${{ env.TAG }}

  # Security: Infrastructure as Code scanning
  iac-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov IaC scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes

  # Enhanced deployment with security checks
  deploy-to-remote:
    needs: [docker-build-push, iac-scan]
    runs-on: ubuntu-latest
    environment: production
    env:
      TAG: ${{ needs.validate-inputs.outputs.safe-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Replace Docker tag in docker-compose.yml
        run: |
          # Use environment variable instead of direct substitution
          export DOCKER_TAG="${{ env.TAG }}"
          envsubst < docker-compose.yml.template > docker-compose.yml || \
          sed -i "s|sidraut007/spring-bankapp:.*|sidraut007/spring-bankapp:${DOCKER_TAG}|g" docker-compose.yml

      - name: Copy deployment files to remote
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          source: |
            docker-compose.yml
            .env
          target: "~/bankapp"

      - name: Deploy with security checks
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            cd ~/bankapp
            
            # Verify image signature before deployment
            docker pull ${{ env.IMAGE_NAME }}:${{ env.TAG }}
            
            # Graceful deployment
            docker-compose down --remove-orphans
            docker-compose up -d
            
            # Enhanced health checks
            echo "Waiting for application to start..."
            sleep 30
            
            # Multiple health check attempts
            for i in {1..5}; do
              if curl -f -s http://localhost:8080/actuator/health; then
                echo "Health check passed on attempt $i"
                break
              else
                echo "Health check failed on attempt $i, retrying..."
                sleep 10
              fi
              if [ $i -eq 5 ]; then
                echo "All health checks failed!"
                docker-compose logs
                exit 1
              fi
            done

  # Security: Runtime monitoring setup
  setup-monitoring:
    needs: deploy-to-remote
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Setup runtime security monitoring
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            # Setup log monitoring for security events
            echo "Setting up security monitoring..."
            # Add your monitoring setup commands here
name: Bank-app Pipeline

on:
  workflow_dispatch:
    inputs:
      DOCKER_TAG:
        description: 'Choose the Docker image tag for the deployment'
        required: true
        default: 'blue'
        type: choice
        options:
          - blue
          - green

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sidraut007/spring-bankapp
      TAG: ${{ github.event.inputs.DOCKER_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven compile
        run: mvn compile

      - name: Maven test (skip tests?)
        run: mvn test -DskipTests=true

      # - name: SonarQube Scan
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     # Install sonar-scanner CLI if needed
      #     wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
      #     unzip sonar-scanner-cli-4.8.0.2856-linux.zip
      #     export PATH=$PWD/sonar-scanner-4.8.0.2856-linux/bin:$PATH

      #     sonar-scanner \
      #       -Dsonar.projectKey=bankapp \
      #       -Dsonar.projectName=bankapp \
      #       -Dsonar.java.binaries=target \
      #       -Dsonar.login=$SONAR_TOKEN

      # - name: Sonar Quality Gate Check
      #   uses: sonarsource/sonarcloud-github-action@master
      #   with:
      #     sonar-token: ${{ secrets.SONAR_TOKEN }}
      #     timeout: 60  # seconds
      #   continue-on-error: true  # like abortPipeline: false

      - name: Maven install (skip tests)
        run: mvn clean install -DskipTests=true

  docker-build-push:
    needs: build-test-scan
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sidraut007/spring-bankapp
      TAG: ${{ github.event.inputs.DOCKER_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG }}

  update-k8s-manifest:
    needs: docker-build-push
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sidraut007/spring-bankapp
      TAG: ${{ github.event.inputs.DOCKER_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git for committing changes
        run: |
          git config user.email "github-actions@github.com"
          git config user.name "GitHub Actions"

      - name: Update K8s manifest image tag
        run: |
          sed -i 's|image: sidraut007/spring-bankapp.*|image: ${IMAGE_NAME}:${TAG}|' k8s/manifest/bankapp-deploy.yaml
          git add k8s/manifest/bankapp-deploy.yaml
          git commit -m "Update bankapp image tag to ${TAG}" || echo "No changes to commit"

      - name: Push changes back to main branch
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: main

  deploy-to-k8s:
    needs: update-k8s-manifest
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG_DATA }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy Kubernetes resources
        working-directory: ./k8s/manifest
        run: |
          kubectl apply -f pv.yaml
          kubectl apply -f pvc.yaml
          kubectl apply -f mysql-secret.yaml
          kubectl apply -f mysql-config.yaml
          kubectl apply -f bankapp-secret.yaml
          kubectl apply -f bankapp-config.yaml
          kubectl apply -f .

      - name: Verify Deployment
        run: |
          kubectl get pods
          kubectl get svc
